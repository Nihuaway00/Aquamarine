name: Deploy to 'Timeweb' server

on:
  push:
    branches:
      - prod  # Деплой запускается при пуше в main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.10.0'
    - run: npm ci
    - run: npm test

  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1  # Уменьшаем глубину клонирования

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.TIMEWEB }}

    - name: Add server to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H 154.194.53.158 >> ~/.ssh/known_hosts  # Получаем и добавляем ключ сервера

    - name: Copy files to server
      run: |
        # scp -r . root@154.194.53.158:~/projects/Aquamarine
        rsync -avz --delete ./ root@154.194.53.158:~/projects/Aquamarine
      
    - name: Restart only web-executor and web-producer
      run: |
        ssh root@154.194.53.158 '
          cd ~/projects/Aquamarine/src &&
          export SINK_URI=${{vars.SINK_URI}}  &&
          export MINIO_ROOT_USER=${{vars.MINIO_ROOT_USER}} &&
          export MINIO_ROOT_PASSWORD=${{vars.MINIO_ROOT_PASSWORD}} &&
          export PRODUCER_LOGGER_TOKEN=${{secrets.PRODUCER_LOGGER_TOKEN}} &&
          export EXECUTOR_LOGGER_TOKEN=${{secrets.EXECUTOR_LOGGER_TOKEN}} &&
          export RABBITMQ_LOGGER_TOKEN=${{secrets.RABBITMQ_LOGGER_TOKEN}} &&
          export MINIO_LOGGER_TOKEN=${{secrets.MINIO_LOGGER_TOKEN}} &&
          export NGINX_LOGGER_TOKEN=${{secrets.NGINX_LOGGER_TOKEN}} &&
          export RABBITMQ_DEFAULT_USER=${{ vars.RABBITMQ_DEFAULT_USER}} &&
          export RABBITMQ_DEFAULT_PASS=${{ vars.RABBITMQ_DEFAULT_PASS}} &&
          export MINIO_ACCESS_KEY=${{secrets.MINIO_ACCESS_KEY}} &&
          export MINIO_SECRET_KEY=${{secrets.MINIO_SECRET_KEY}} &&
          docker-compose down &&
          docker-compose up -d --build &&
          docker system prune -f --volumes
        '
        